version: '3.3'
services:
#    github-runner:
#      image: ghcr.io/${GITHUB_OWNER}/github-runner:1.0.1
#      environment:
#        - GITHUB_OWNER=${GITHUB_OWNER}
#        - GITHUB_REPOSITORY=${GITHUB_REPOSITORY}
#        - GITHUB_PAT=${GITHUB_PAT}
  minio:
    image: minio/minio
    container_name: minio
    command: server --console-address ":9001" /export
    ports:
      - "47017:9000"
      - "47018:9001"
    environment:
      MINIO_ROOT_USER: myaccesskey
      MINIO_ROOT_PASSWORD: mysecretkey
      MINIO_BUCKET: processor
    volumes:
      - minio:/export
    networks:
      - l_net

  mysql-db:
    image: mysql:8
    container_name: mysql-container
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - '3306:3306'
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - l_net

  postgres-db:
    image: postgres:14.1-alpine
    container_name: postgres-container
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres-db:/var/lib/postgres
    networks:
      - l_net

  rabbitmq:
    build: rabbitMQ/.
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
      - "61613:61613"
    volumes:
      - rabbit-conf:/var/lib/rabbitmq/
      - rabbit-log:/var/log/rabbitmq
    networks:
      - l_net

  mongo:
    image: mongo:6.0.2
    container_name: mongo-container
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "27017:27017"
    volumes:
      - mongo-db:/var/lib/mongo
    networks:
      - l_net

  prometheus:
    container_name: prometheus
    image: 'prom/prometheus:v2.14.0'
    ports:
      - '9090:9090'
    command: '--config.file=/etc/prometheus/config.yml'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/config.yml'
    networks:
      - l_net

  grafana:
    container_name: grafana
    image: 'grafana/grafana:6.5.0'
    restart: "no"
    volumes:
      - /grafana/provisioning/dashboards/local.yml:/conf/provisioning/dashboards/sample.yml
      - /grafana/dashboards/:/var/lib/grafana/dashboards/
    ports:
      - '3001:3000'
    networks:
      - l_net
  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - l_net
    ports:
      - "9200:9200"

  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    networks:
      - l_net
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"


networks:
  l_net:
    driver: bridge

volumes:
  mysql-db:
  postgres-db:
  cassandra-db:
  mongo-db:
  minio:
  elasticsearch-db:
  rabbit-log:
  rabbit-conf:
  nodemodules:
