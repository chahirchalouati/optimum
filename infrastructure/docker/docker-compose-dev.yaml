version: '3.3'
services:
  #  gitlab-runner:
  #    image: dev-gramify-runner
  #    restart: no
  #    volumes:
  #      - /var/run/docker.sock:/var/run/docker.sock
  #      - /srv/gitlab-runner/config:/etc/gitlab-runner
  #    env_file:
  #      - ../runner/.env
  minio:
    image: minio/minio
    container_name: minio
    command: server --console-address ":9001" /export
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "47017:9000"
      - "47018:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    volumes:
      - minio:/export
    networks:
      - l_net

  mysql-db:
    image: mysql:8
    container_name: mysql-container
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql --silent" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - l_net

  rabbitmq:
    build: rabbitMQ/.
    container_name: rabbitmq-container
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
      - "61613:61613"
    volumes:
      - rabbit-conf:/var/lib/rabbitmq/
      - rabbit-log:/var/log/rabbitmq
    networks:
      - l_net

  mongo:
    image: mongo:6.0.2
    container_name: mongo-container
    healthcheck:
      test: [ "CMD-SHELL", "mongo --quiet --eval \"db.adminCommand('ping')\"" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "27017:27017"
    volumes:
      - mongo-db:/var/lib/mongo
    networks:
      - l_net

  #  prometheus:
  #    platform: linux/amd64
  #    image: 'prom/prometheus:v2.14.0'
  #    ports:
  #      - '9090:9090'
  #    command: '--config.file=/etc/prometheus/config.yml'
  #    volumes:
  #      - './prometheus/prometheus.yml:/etc/prometheus/config.yml'
  #    networks:
  #      - l_net

  #  grafana:
  #    platform: linux/amd64
  #    image: 'grafana/grafana:6.5.0'
  #    restart: "no"
  #    volumes:
  #      - /grafana/provisioning/dashboards/local.yml:/conf/provisioning/dashboards/sample.yml
  #      - /grafana/dashboards/:/var/lib/grafana/dashboards/
  #    ports:
  #      - '3001:3000'
  #    networks:
  #      - l_net
  #
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - l_net
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.11.0
    volumes:
      - ./logstash/config:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - l_net

  kibana:
    platform: linux/amd64
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
    networks:
      - l_net
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  postgres:
    image: docker.io/bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: keycloak
      POSTGRESQL_PASSWORD: keycloak
      POSTGRESQL_DATABASE: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/bitnami/postgresql
    networks:
      - l_net

#  keycloak:
#    image: docker.io/bitnami/keycloak
#    depends_on:
#      - postgres
#    environment:
#      KEYCLOAK_CREATE_ADMIN_USER: true
#      KEYCLOAK_DATABASE_HOST: postgres
#      KEYCLOAK_DATABASE_NAME: keycloak
#      KEYCLOAK_DATABASE_USER: keycloak
#      KEYCLOAK_DATABASE_PASSWORD: keycloak
#      KEYCLOAK_ADMIN_USER: root
#      KEYCLOAK_ADMIN_PASSWORD: root
#    ports:
#      - "9080:8080"
#    networks:
#      - l_net

networks:
  l_net:


volumes:
  mysql-db:
  postgres-db:
  cassandra-db:
  mongo-db:
  minio:
  elasticsearch-db:
  rabbit-log:
  rabbit-conf:
  nodemodules:
