version: '3.3'
services:
  configuration-service:
    build:
      context: ../../configuration-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.profiles.active":"docker"
      }'
    ports:
      - '8888:8888'
    networks:
      - l_net

  audit-service:
    build:
      context: ../../audit-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
      - authentication-service
    ports:
      - '7003:7003'
    networks:
      - l_net

  authentication-service:
    build:
      context: ../../authentication-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '9000:9000'
    networks:
      - l_net

  post-service:
    build:
      context: ../../post-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
         "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
      - authentication-service
    ports:
      - '7005:7005'
    networks:
      - l_net

  proxy-service:
    build:
      context: ../../proxy-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
         "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
      - authentication-service
    ports:
      - '9999:9999'
    networks:
      - l_net
  notification-service:
    build:
      context: ../../notification-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
         "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
      - authentication-service
    ports:
      - '7008:7008'
    networks:
      - l_net
  storage-service:
    build:
      context: ../../storage-service/
      dockerfile: DockerFile
      args:
        USER_NAME: chahirchaloauti
        PASSWORD: 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
        ID: github
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
         "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
      - authentication-service
    ports:
      - '7010:7010'
    networks:
      - l_net

  social-service:
    build:
      context: ../../clients/social/
      dockerfile: DockerFile
    container_name: client
    environment:
      - OAUTH_CALLBACK_URL=http://social-service:4200/authorized
      - OAUTH_AUTHORIZE_URL=http://authentication-service:9000/oauth2/authorize
      - PROXY_URL=http://proxy-service:9999
    ports:
      - "4200:4200"
      - '49153:49153'
    volumes:
      - ../../clients/social:/app
      - nodemodules:/app/node_modules
    networks:
      - l_net
networks:
  l_net:
    driver: bridge
volumes:
  mysql-db:
  postgres-db:
  cassandra-db:
  mongo-db:
  minio:
  elasticsearch-db:
  rabbit-log:
  rabbit-conf:
  nodemodules:
