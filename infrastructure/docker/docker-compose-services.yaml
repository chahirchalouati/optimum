version: '3.3'

services:
  audit-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/audit:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7003:7003'
    networks:
      - l_net
  authentication-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/authentication:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '9000:9000'
    networks:
      - l_net
  comment-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/comment:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7001:7001'
    networks:
      - l_net
  configuration-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/configuration:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    ports:
      - '8888:8888'
    networks:
      - l_net
  friendship-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/friendship:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7006:7006'
    networks:
      - l_net
  proxy-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/gateway:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '9999:9999'
    networks:
      - l_net
  message-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/message:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7007:7007'
    networks:
      - l_net
  notification-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/notification:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7008:7008'
    networks:
      - l_net
  post-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/post:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7005:7005'
    networks:
      - l_net
  processor-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/processor:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7012:7012'
    networks:
      - l_net
  profile-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/profile:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7009:7009'
    networks:
      - l_net
  storage-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/storage:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7010:7010'
    networks:
      - l_net
  story-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/story:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7002:7002'
    networks:
      - l_net
  user-info-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/user-info:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7011:7011'
    networks:
      - l_net
  utilties-service:
    image: registry.gitlab.com/chehhhir/gramify-ms/utilties:1.0.1
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.cloud.config.uri": "http://configuration-service:8888",
        "spring.profiles.active":"docker"
      }'
    depends_on:
      - configuration-service
    ports:
      - '7004:7004'
    networks:
      - l_net

  minio:
    image: minio/minio
    container_name: minio
    command: server --console-address ":9001" /export
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "47017:9000"
      - "47018:9001"
    environment:
      MINIO_ROOT_USER: myaccesskey
      MINIO_ROOT_PASSWORD: mysecretkey
      MINIO_BUCKET: processor
    volumes:
      - minio:/export
    networks:
      - l_net

  mysql-db:
    image: mysql:8
    container_name: mysql-container
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql --silent" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - '3306:3306'
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - l_net

  rabbitmq:
    build: infrastructure/docker/rabbitMQ/.
    container_name: rabbitmq-container
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
      - "61613:61613"
    volumes:
      - rabbit-conf:/var/lib/rabbitmq/
      - rabbit-log:/var/log/rabbitmq
    networks:
      - l_net

  mongo:
    image: mongo:6.0.5
    container_name: mongo-container
    ports:
      - "27017:27017"
    volumes:
      - mongo-db:/var/lib/mongo
    networks:
      - l_net

networks:
  l_net:

volumes:
  mysql-db:
  postgres-db:
  cassandra-db:
  mongo-db:
  minio:
  elasticsearch-db:
  rabbit-log:
  rabbit-conf:
  nodemodules:
