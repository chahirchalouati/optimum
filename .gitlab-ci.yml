# Global CI/CD configuration
stages:
  - maven
  - docker
  - deploy

variables:
  CACHE_DIR: docker-cache
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  MAVEN_CLI_OPTS: >-
    --settings ci_settings.xml
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

cache:
  paths:
    - .m2/repository
    - ${CACHE_DIR}

.changes:
  only:
    changes:
      - $MODULE_NAME/**

# Define a reusable template for building, testing, and deploying each microservice
.microservice_template:
  extends: .changes
  before_script:
    - echo "Start build $MODULE_NAME"
  script:
    - if [ ! -f ci_settings.xml ]; then
      echo "CI settings missing";
      fi
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS clean package -pl "$MODULE_NAME"
  tags:
    - dev
  allow_failure: true

.docker_template:
  extends: .changes
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [ "" ]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/$MODULE_NAME"
      --dockerfile "Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/$MODULE_NAME:$CI_COMMIT_SHORT_SHA"
      --cache=true
      --cache-dir=$CACHE_DIR
  tags:
    - dev
  allow_failure: true
  when: manual

.deploy_template:
  extends: .changes
  image: docker:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f ./infrastructure/docker/docker-compose-services-dev.yaml up -d $MODULE_NAME
  tags:
    - dev
  allow_failure: true
  when: manual

# Microservice-specific jobs
audit-service:
  stage: maven
  variables:
    MODULE_NAME: audit-service
  script:
    - echo "Building audit-service"
  extends: .microservice_template

audit-service-docker:
  stage: docker
  variables:
    MODULE_NAME: audit-service
  script:
    - echo "Building Docker image for audit-service"
  extends: .docker_template

audit-service-deploy:
  stage: deploy
  variables:
    MODULE_NAME: audit-service
  script:
    - echo "Deploying audit-service"
  extends: .deploy_template

# Repeat the above for each microservice with appropriate names and settings
authentication-service:
  stage: maven
  variables:
    MODULE_NAME: authentication-service
  script:
    - echo "Building authentication-service"
  extends: .microservice_template
# ...and so on for other microservices
